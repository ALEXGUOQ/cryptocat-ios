//
//  TBChateStateNotification.m
//  Cryptocat
//
//  Created by Thomas Balthazar on 15/11/13.
//  Copyright (c) 2013 Thomas Balthazar. All rights reserved.
//
//  This file is part of Cryptocat for iOS.
//
//  Cryptocat for iOS is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  Cryptocat for iOS is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with Cryptocat for iOS.  If not, see <http://www.gnu.org/licenses/>.
//

#import "TBChateStateNotification.h"
#import "TBMessageView.h"

#define kComposing  @"composing"
#define kPaused     @"paused"
#define kActive     @"active"

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
@interface TBChateStateNotification ()

@property (nonatomic, strong) NSString *notificationType;
@property (nonatomic, strong, readwrite) NSAttributedString *attributedText;


+ (TBChateStateNotification *)notificationWithType:(NSString *)notificationType;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
@implementation TBChateStateNotification

////////////////////////////////////////////////////////////////////////////////////////////////////
- (id)init {
  if (self=[super init]) {
    _notificationType = nil;
    _attributedText = nil;
    _sender = nil;
  }
  
  return self;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
- (void)setSender:(TBBuddy *)sender {
  _sender = sender;
  
  // I compute an attributedString cause this property is needed for composing cells to compute
  // the cell metrics
  self.attributedText = [TBMessageView attributedStringForSenderName:sender.nickname message:@" "];
}

////////////////////////////////////////////////////////////////////////////////////////////////////
- (BOOL)isComposingNotification {
  return [self.notificationType isEqualToString:kComposing];
}

////////////////////////////////////////////////////////////////////////////////////////////////////
- (BOOL)isPausedNotification {
  return [self.notificationType isEqualToString:kPaused];
}

////////////////////////////////////////////////////////////////////////////////////////////////////
- (BOOL)isActiveNotification {
  return [self.notificationType isEqualToString:kActive];
}

////////////////////////////////////////////////////////////////////////////////////////////////////
+ (TBChateStateNotification *)composingNotification {
  return [self notificationWithType:kComposing];
}

////////////////////////////////////////////////////////////////////////////////////////////////////
+ (TBChateStateNotification *)pausedNotification {
  return [self notificationWithType:kPaused];
}

////////////////////////////////////////////////////////////////////////////////////////////////////
+ (TBChateStateNotification *)activeNotification {
  return [self notificationWithType:kActive];
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
#pragma mark -
#pragma mark Private Methods

////////////////////////////////////////////////////////////////////////////////////////////////////
+ (TBChateStateNotification *)notificationWithType:(NSString *)notificationType {
  TBChateStateNotification *csn = [[TBChateStateNotification alloc] init];
  csn.notificationType = notificationType;
  return csn;
}

@end
